find_package(PkgConfig)
pkg_check_modules(PC_LIBCHECK QUIET check)

find_library(LIBCHECK_LIBRARIES
    NAMES check
    HINTS ${PC_LIBCHECK_LIBDIR}
          ${PC_LIBCHECK_LIBRARY_DIRS}
		  ${LIBCHECK_BUNDLED_LIBDIR}
)

find_path(LIBCHECK_INCLUDE_DIR
    NAMES check.h
    HINTS ${PC_LIBCHECK_INCLUDEDIR}
          ${PC_LIBCHECK_INCLUDE_DIRS}
		  ${LIBCHECK_BUNDLED_INCLUDEDIR}
)

set(LIBCHECK_INCLUDE_DIRS ${LIBCHECK_INCLUDE_DIR})
set(LIBCHECK_LIBRARIES ${LIBCHECK_LIBRARIES} ${PC_LIBCHECK_LDFLAGS})

# Version detection
file(READ "${LIBCHECK_INCLUDE_DIR}/check.h" LIBCHECK_H_CONTENTS)
string(REGEX MATCH "#define CHECK_MAJOR_VERSION \\(([0-9]+)\\)" _dummy "${LIBCHECK_H_CONTENTS}")
set(LIBCHECK_VERSION_MAJOR "${CMAKE_MATCH_1}")
string(REGEX MATCH "#define CHECK_MINOR_VERSION \\(([0-9]+)\\)" _dummy "${LIBCHECK_H_CONTENTS}")
set(LIBCHECK_VERSION_MINOR "${CMAKE_MATCH_1}")
string(REGEX MATCH "#define CHECK_MICRO_VERSION \\(([0-9]+)\\)" _dummy "${LIBCHECK_H_CONTENTS}")
set(LIBCHECK_VERSION_MICRO "${CMAKE_MATCH_1}")
set(LIBCHECK_VERSION "${LIBCHECK_VERSION_MAJOR}.${LIBCHECK_VERSION_MINOR}.${LIBCHECK_VERSION_MICRO}")

include(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Check REQUIRED_VARS LIBCHECK_INCLUDE_DIRS LIBCHECK_LIBRARIES ${ADDITIONAL_REQUIRED_VARS}
                                       VERSION_VAR   LIBCHECK_VERSION)
                                       
mark_as_advanced(
    LIBCHECK_INCLUDE_DIRS
    LIBCHECK_INCLUDE_DIR
    LIBCHECK_LIBRARIES
)
